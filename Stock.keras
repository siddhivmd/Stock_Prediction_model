from keras.layers import Dense, Dropout , LSTM
from keras.models import Sequential
model = Sequential()
model.add(LSTM(units=50, activation='relu', return_sequences=True, input_shape=(data_train_scale.shape[1],1)))
model.add(Dropout(0.2))
model.add(LSTM(units = 60, activation='relu', return_sequences=True))
model.add(Dropout(0.3))
model.add(LSTM(units=80, activation='relu', return_sequences=True))
model.add(Dropout(0.4))
model.add(LSTM(units=120, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(units=1))
model.compile(optimizer = 'adam' , loss = 'mean_squared_error')
model.fit(x,y, epochs = 50 , batch_size = 32 , verbose = 1)
model.summary()
pas_100_days =data_train.tail(100)
data_test = pd.concat ([pas_100_days , data_test] , ignore_index = True)
data_test_scale = scaler.fit_transform(data_test)
x=[]
y=[]
for i in range (100 , data_test_scale.shape[0]):
  x.append(data_test_scale[i-100:i])
  y.append(data_test_scale[i,0])
x , y = np.array(x), np.array(y)
y_predict = model.predict(x)
y_predict
scale = 1/scaler.scale_
y_predict = y_predict*scale
y= y*scale
plt.figure(figsize = (10,8))
plt.plot (y_predict , 'r' , label ='predicted Price')
plt.plot (y , 'g' , label ='Original Price')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()
model.save('Stock Prediciton Model.keras')